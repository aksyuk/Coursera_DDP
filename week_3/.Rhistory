fileURL <- paste0(fileURL, search[iter])
#замена пробелов на %20
gsub(pattern = '[ ]', replacement = '%20', x = fileURL)
#загрузка текста html страницы
html <- getURL(fileURL)
#разбираем как html
doc <- htmlTreeParse(html, useInternalNodes = T)
#корневой элемент
rootNode <- xmlRoot(doc)
#выбор ссылок
u <- xpathSApply(rootNode, '//span[contains(@class, "fz-ms fw-m fc-12th wr-bw lh-17")]', xmlValue)
#выделение источников
s <- gsub(pattern = '/.+', replacement = '', x = u)
#выбор заголовков
h <- xpathSApply(rootNode, '//div[contains(@class, "compTitle options-toggle")]', xmlValue)
#убираем конечный пробел
h <- gsub(pattern = '[ ]+$', replacement = '', x = h)
#т.к. в некоторых запросах теги для ссылок разные, то
#формируем новый вектор
h.short <- c()
for (i in 1:length(u)){
#ищем совпадение с ссылками
tmp <- grep(pattern = u[i], x = h[i:length(h)], value=TRUE, fixed = T)
if(length(tmp) != 0){
h.short <- c(h.short, tmp[1])
}
#выделяем ссылку
h.short.url <- gsub(pattern = '.+[ ]', replacement = '', x = h.short)
h.title <- c()
for (i in 1:length(h.short.url)){
#выделяем заголовок
h.title <- c(h.title, gsub(pattern = h.short.url[i], replacement = '', x = h.short[i], fixed = T))
}
#убираем конечный пробел
h.title <- gsub(pattern = '[ ]+$', replacement = '', x = h.title)
#объединяем вектора во фрейм
df1 <- data.frame(Year = god+iter.step, Header = h.title, Source = s, URL = u)
#добавляем строки во фрейм
df <<- rbind(df, df1)
#обновляем загрузку
svalue(panel.loading) <- paste("Загрузка ", 100 * iter.step/step, " %")
}
#пауза от капчи
Sys.sleep(5)
iter.step <- iter.step + 1
}
if (flag){
#добавляем таблицу в окно
panel.table <<- gtable(items = df, container = group)
size(panel.table) <- c(300, 500)
flag <<- F
}else{
#обновляем таблицу в окне
delete(group, panel.table)
panel.table <<- gtable(items = df, container = group)
size(panel.table) <- c(300, 500)
}
#функция сохранения таблицы
my.save <- function(h,..){
#перезапись файла
write.csv(df, './Timeline.csv', row.names = F)
}
#!!!нужно выбрать пакет gWidgetsRGtk2
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#создание элементов в окне
panel.search <- gedit(text = "Your search", width = 40)
panel.btn <- gbutton(text = "Найти")
panel.btn.save <- gbutton(text = "Сохранить")
panel.text.search <- glabel()
panel.loading <- glabel()
#создание стилей
font(panel.loading) <- c( color = "red")
font(panel.text.search) <- c( size = "14")
#создание элементов в окне
panel.slider.period <- gslider(from=10, to=100, by=1)
panel.slider.date <- gslider(from=1900, to=2050, by=1)
panel.label.data <- glabel(text = " С какого \n года ")
panel.label.period <- glabel(text = " Число лет  ")
#Обработка события при нажатии на кнопку поиск
addHandlerClicked(panel.btn, handler=my.search)
#Обработка события при нажатии на кнопку сохранить
addHandlerClicked(panel.btn.save, handler=my.save)
#Создание окна
window <- gwindow("Результаты поисковика Yahoo", width = 900, height = 700, visible = F)
group <<- ggroup(horizontal=F, container=window)
#Добавление в окно поля загрузки
tmp <- gframe("", container=group)
add(tmp, panel.loading)
#Добавление в окно текстовой метки
glabel(text = "Что ищем?", container=group)
tmp <- gframe("Запрос на английском (желательно)", container=group)
#Добавление в окно textbox
add(tmp, panel.search)
#Добавление в окно label
add(tmp, panel.label.data)
#Добавление в окно slider даты
size(panel.slider.date) <- c(150, 40)
add(tmp, panel.slider.date)
#Добавление в окно label
add(tmp, panel.label.period)
#Добавление в окно slider - период
size(panel.slider.period) <- c(150, 40)
add(tmp, panel.slider.period)
#Добавление в окно кнопку поиска
add(tmp, panel.btn)
#Добавление в окно кнопку сохранить
add(tmp, panel.btn.save)
tmp <- gframe("Ваш текущий запрос", container=group)
#Добавление в окно label
add(tmp, panel.text.search)
visible(window) <- T
d1 <- dnorm(x, mean = -2, sd = 1)
x <- seq(-5, 5, length = 200)
d1 <- dnorm(x, mean = -2, sd = 1)
d2 <- dnorm(x, mean = 2, sd = 1)
plot(x, d1, col = 'darkgreen', lwd = 3)
plot(x, d1, col = 'darkgreen', lwd = 3, type = 'l')
x.s.1 <- sample(seq(0, 6, length = 200), 30)
x.s.2 <- sample(seq(2, 8, length = 200), 30)
y.s.1 <- predict(d1, x.s.1)
library('ISLR')
set.seed(my.seed)
my.seed <- 12345
length(Default$default)
train.percent
train.percent <- 0.85
??lda
library('MASS')      # lda()
model.lda <- lda(default ~ ., data = Default[inTrain, ])
set.seed(my.seed)
inTrain <- sample(seq_along(Default$default),
nrow(Default)*train.percent)
model.lda <- lda(default ~ ., data = Default[inTrain, ])
model.lda
default.lda <- pderict(model.lda, Default[inTrain, ])
default.lda <- prerict(model.lda, Default[inTrain, ])
default.lda <- predict(model.lda, Default[inTrain, ])
default.lda
default.lda <- predict(model.lda, Default[inTrain, ],
type = 'response')
default.lda
default.lda <- predict(model.lda, Default[inTrain, ])
str(default.lda)
default.lda$posterior[, 1] >= 0.5
table(default.lda$posterior[, 1] >= 0.5, Default[inTrain, 'default'])
model.lda
default.fact <- Default[inTrain, 'default']
default.lda$class
head(cbind(default.lda$posterior, default.lda$class))
default.lda$posterior[, 'No'] > 0.8
p <- 0
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p,
'No', 'Yes')
tbl <- as.data.frame(table(Факт, Прогноз))
Факт <- Default[inTrain, 'default']
tbl <- as.data.frame(table(Факт, Прогноз))
TPR <- tbl[2, 2] / sum(tbl[2, 2] + tbl[2, 1])
tbl
tbl <- table(Факт, Прогноз)
tbl
p <- 0.000001
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p,
'No', 'Yes')
tbl <- table(Факт, Прогноз)
x <- NULL
y <- NULL
for (p in seq(0.000001, 0.999999, length = 100)){
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p,
'No', 'Yes')
tbl <- table(Факт, Прогноз)
TPR <- tbl[2, 2] / sum(tbl[2, 2] + tbl[2, 1])
y <- c(y, TPR)
SPC <- tbl[1, 1] / sum(tbl[1, 1] + tbl[1, 2])
x <- c(x, 1 - SPC)
}
png('Pic-08.png', width = 600, height = 600)
par(mar = c(5, 5, 1, 1))
plot(x = , y, type = 'line', col = 'blue', lwd = 3)
dev.off()
tbl
p <- 0.001
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p,
'No', 'Yes')
tbl <- table(Факт, Прогноз)
tbl
??ROC
install.packages("pROC")
library('pROC')
?ROC
library('pROC')
?roc
Прогноз
Факт
??confusion
p <- 0.001
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p,
'No', 'Yes')
Прогноз
df.compare <- cbind(Факт, Прогноз)
df.compare
Факт
as.numeric(Факт)
as.numeric(Прогноз)
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p, 1, 2)
df.compare <- cbind(as.numeric(Факт), Прогноз)
df.compare
tbl <- as.data.frame(matrix(rep(0, 4), 2, 2))
tbl
rownames(tbl) <- c('fact.No', 'fact.Yes')
col(tbl) <- c('predict.No', 'predict.Yes')
tbl <- as.data.frame(matrix(rep(0, 4), 2, 2))
rownames(tbl) <- c('fact.No', 'fact.Yes')
colnames(tbl) <- c('predict.No', 'predict.Yes')
tbl
df.compare
df.compare <- cbind(Факт = as.numeric(Факт), Прогноз)
head(df.compare)
nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 1, ])
is.data.frame(df.compare)
df.compare <- data.frame(Факт = as.numeric(Факт),
Прогноз = Прогноз)
df.compare
is.data.frame(df.compare)
nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 1, ])
tbl[1, 1] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 1, ])
tbl[2, 2] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 2, ])
tbl
tbl[1, 2] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 2, ])
tbl[2, 1] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 1, ])
tbl
p <- 0.001
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p, 1, 2)
df.compare <- data.frame(Факт = as.numeric(Факт),
Прогноз = Прогноз)
tbl[1, 1] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 1, ])
tbl[2, 2] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 2, ])
tbl[1, 2] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 2, ])
tbl[2, 1] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 1, ])
tbl
TPR <- tbl[2, 2] / sum(tbl[2, 2] + tbl[2, 1])
TPR
SPC <- tbl[1, 1] / sum(tbl[1, 1] + tbl[1, 2])
SPC
p <- 0.5
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p, 1, 2)
df.compare <- data.frame(Факт = as.numeric(Факт),
Прогноз = Прогноз)
tbl[1, 1] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 1, ])
tbl[2, 2] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 2, ])
tbl[1, 2] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 2, ])
tbl[2, 1] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 1, ])
tbl
TPR <- tbl[2, 2] / sum(tbl[2, 2] + tbl[2, 1])
TPR
SPC <- tbl[1, 1] / sum(tbl[1, 1] + tbl[1, 2])
SPC
1 - SPC
y
x
x <- NULL
y <- NULL
tbl <- as.data.frame(matrix(rep(0, 4), 2, 2))
rownames(tbl) <- c('fact.No', 'fact.Yes')
colnames(tbl) <- c('predict.No', 'predict.Yes')
for (p in seq(0.001, 0.999, length = 100)){
Прогноз <- ifelse(default.lda$posterior[, 'No'] > p, 1, 2)
df.compare <- data.frame(Факт = as.numeric(Факт),
Прогноз = Прогноз)
tbl[1, 1] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 1, ])
tbl[2, 2] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 2, ])
tbl[1, 2] <- nrow(df.compare[df.compare$Факт == 1 & df.compare$Прогноз == 2, ])
tbl[2, 1] <- nrow(df.compare[df.compare$Факт == 2 & df.compare$Прогноз == 1, ])
TPR <- tbl[2, 2] / sum(tbl[2, 2] + tbl[2, 1])
y <- c(y, TPR)
SPC <- tbl[1, 1] / sum(tbl[1, 1] + tbl[1, 2])
x <- c(x, 1 - SPC)
}
x
y
?text
pr = function(n) return(1 - (1 - 1/n)^n)
x = 1:1e+05
plot(x, pr(x))
plot(x, pr(x), pch = '·')
pr = function(n) return(1 - (1 - 1/n)^n)
x = 1:1e+05
plot(x, pr(x), pch = '·')
library('ISLR')
library('GGally')
library('MASS')
?Titanic
my.seed <- 12345
train.percent <- 0.85
data(Titanic)
Tit <- as.data.frame(Titanic)
ggpairs(Tit)
str(Tit)
?Titanic
set.seed(my.seed)
inTrain <- sample(seq_along(Tit$Survived),
nrow(Tit) * train.percent)
df <- Tit[inTrain, ]
head(df)
# фактические значения на обучающей выборке
Факт <- df$Survived
# Логистическая регрессия ======================================================
model.logit <- glm(Survived ~ ., data = df,
family = 'binomial')
summary(model.logit)
str(Titanic)
df
set.seed(my.seed)
inTrain <- sample(seq_along(Tit$Survived),
nrow(Tit) * train.percent)
df <- Tit[inTrain, ]
df
Tit
Titanic
dim(Titanic)
as.data.frame(Titanic)
install.packages("titanic")
library('titanic')
titanic
data(titanic)
titanic
data("titanic_train")
titanic_train
fileURL <- 'https://raw.githubusercontent.com/bdemeshev/coursera_metrics/master/lab_07/titanic3.csv'
df <- read.csv(fileURL)
df
df <- read.csv(fileURL, row.names = 1)
df
?show
?colSums
?predict
?lm
?dgamma
?mean
?lm
?predict
?colSums
?show
ftype(mean)
library(pryr)
install.packages("pryr")
library(pryr)
ftype(mean)
ftype(predict)
ftype(show)
ftype(colSums)
install.packages("plotly")
?plotly
fileURL <- 'https://raw.githubusercontent.com/aksyuk/R-data/master/COMTRADE/040510-Imp-RF-comtrade.csv'
# читаем данные
DF.import <- read.csv(fileURL, as.is = T)
DF.import
head(DF.import)
install.packages("curl")
R.version
install.packages("DBI")
install.packages("kohonen")
install.packages("lattice")
install.packages("maptools")
install.packages("psych")
install.packages("Rcpp")
install.packages("rmarkdown")
install.packages("scatterplot3d")
install.packages("shiny")
install.packages("stringi")
install.packages("tibble")
install.packages("XML")
DF.import <- data.table(read.csv(fileURL, as.is = T))
library('plotly')
library('data.table')
fileURL <- 'https://raw.githubusercontent.com/aksyuk/R-data/master/COMTRADE/040510-Imp-RF-comtrade.csv'
DF.import <- data.table(read.csv(fileURL, as.is = T))
DF.import[, apply(.SD["Trade.Value.USD"], 2, sum), by = Reporter]
DF.import[, c('Reporter', 'Trade.Value.USD'), with = F]
dt <- DF.import[, c('Reporter', 'Trade.Value.USD'), with = F]
dt <- DF.import[, c('Year', 'Reporter', 'Trade.Value.USD'), with = F]
dt[, by = c('Year', 'Reporter')]
dt[, sum(.SD$Trade.Value.USD), by = c('Year', 'Reporter')]
pl
install.packages("webshot")
webshot::install_phantomjs()
dt
DF.import <- data.table(read.csv(fileURL, as.is = T))
dt <- DF.import[, c('Year', 'Reporter', 'Trade.Value.USD'), with = F]
dt <- dt[, sum(.SD$Trade.Value.USD), by = c('Year', 'Reporter')]
dt
DF.import <- data.table(read.csv(fileURL, as.is = T))
dt <- DF.import[, c('Year', 'Reporter', 'Trade.Value.USD'), with = F]
dt <- dt[, sum(.SD$Trade.Value.USD/10^6), by = c('Year', 'Reporter')]
colnames(dt)[colnames(dt) == 'V1'] <- 'Trade.Value.mln.USD'
dt
library('plotly')
library('data.table')
library('jsonlite')
fileURL <- 'https://raw.githubusercontent.com/aksyuk/R-data/master/COMTRADE/040510-Imp-RF-comtrade.csv'
# читаем данные
DF.import <- data.table(read.csv(fileURL, as.is = T))
dt <- DF.import[, c('Year', 'Reporter', 'Trade.Value.USD'), with = F]
dt <- dt[, sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'Reporter')]
colnames(dt)[colnames(dt) == 'V1'] <- 'Trade.Value.000.USD'
fileURL <- "https://raw.githubusercontent.com/aksyuk/R-data/master/COMTRADE/reporters.csv"
reporters <- read.csv2(fileURL, as.is = T)
reporters
# читаем данные по импорту масла в РФ
fileURL <- 'https://raw.githubusercontent.com/aksyuk/R-data/master/COMTRADE/040510-Imp-RF-comtrade.csv'
DF.import <- data.table(read.csv(fileURL, as.is = T))
# читаем справочник по странам
fileURL <- "https://raw.githubusercontent.com/aksyuk/R-data/master/COMTRADE/reporters.csv"
reporters <- read.csv2(fileURL, as.is = T)
head(DF.import)
head(dt)
DF.import <- merge(DF.import, reporters,
by.x = 'Reporter', by.y = 'Reporter',
all.y = F)
DF.import
dt <- DF.import[, c('Year', 'Reporter',
'Trade.Value.USD', 'European_Union'), with = F]
dt
dt.eur <- dt[European_Union == 1,
sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'Reporter')]
dt.eur
dt
dt[,
sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'Reporter', 'European_Union')]
dt[,
sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'European_Union')]
dt <- DF.import[, c('Year', 'Reporter',
'Trade.Value.USD', 'European_Union'), with = F]
dt.1 <- dt[, sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'European_Union')]
dt
colnames(dt)[colnames(dt) == 'Trade.Value.USD'] <- 'Trade.Value.000.USD'
dt
DF.import <- merge(DF.import, reporters,
by.x = 'Reporter', by.y = 'Reporter',
all.y = F)
dt <- DF.import[, c('Year', 'Reporter',
'Trade.Value.USD', 'European_Union'), with = F]
dt.1 <- dt[, sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'European_Union')]
colnames(dt.1)[colnames(dt.1) == 'Trade.Value.USD'] <- 'Trade.Value.000.USD'
DF.import <- merge(DF.import, reporters,
by.x = 'Reporter', by.y = 'Reporter',
all.y = F)
dt <- DF.import[, c('Year', 'Reporter',
'Trade.Value.USD', 'European_Union'), with = F]
dt.1 <- dt[, sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'European_Union')]
dt.1
colnames(dt.1)[colnames(dt.1) == 'V1'] <- 'Trade.Value.000.USD'
dt.1
dt.1[, Trade.Value.000.USD.EU := Trade.Value.000.USD * European_Union]
dt.1
dt.1[, Trade.Value.000.USD.others := Trade.Value.000.USD * (1 - European_Union)]
dt.1
dt.1[, European_Union := NULL]
dt.1
dt.1[, Trade.Value.000.USD := NULL]
dt.1
dt.1[Trade.Value.000.USD == 0, Trade.Value.000.USD] <- NA
dt.1
dt.1[Trade.Value.000.USD.EU == 0, Trade.Value.000.USD.EU] <- NA
dt.1[Trade.Value.000.USD.EU == 0, Trade.Value.000.USD.EU := NA]
dt.1[Trade.Value.000.USD.others == 0, Trade.Value.000.USD.others := NA]
dt.1
dt.1 <- dt[, sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'European_Union')]
colnames(dt.1)[colnames(dt.1) == 'V1'] <- 'Trade.Value.000.USD'
dt.1
melt(dt.1, by = c('Year', 'European_Union'))
melt(dt.1, Year, European_Union)
melt(dt.1, 'Year', 'European_Union')
?melt
melt(dt.1, id = c('Year', 'European_Union'), measure = 'Trade.Value.000.USD')
dt.1
dt.2 <- data.table(Year = 2010:2016)
dt.2
dt.2[, Trade.Value.USD.EU := 0]
dt.2[, Trade.Value.USD.others := 0]
dt.2
dt.2 <- data.table(Year = 2010:2016)
merge(dt.1[European_Union == 1, ], dt.2, by.x = Year, by.y = Year)
merge(dt.1[European_Union == 1, ], dt.2, by.x = 'Year', by.y = 'Year')
merge(dt.1[European_Union == 1, ], dt.2, by.x = 'Year', by.y = 'Year',
all.y = T)
names(dt.2)[names(dt.2) == 'Trade.Value.000.USD'] <- 'Trade.Value.000.USD.EU'
dt.2
dt.1 <- dt[, sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'European_Union')]
colnames(dt.1)[colnames(dt.1) == 'V1'] <- 'Trade.Value.000.USD'
dt.2 <- data.table(Year = 2010:2016)
dt.2 <- merge(dt.1[European_Union == 1, ], dt.2,
by.x = 'Year', by.y = 'Year', all.y = T)
names(dt.2)[names(dt.2) == 'Trade.Value.000.USD'] <- 'Trade.Value.000.USD.EU'
dt.2
dt.2 <- merge(dt.1[European_Union == 0, ], dt.2,
by.x = 'Year', by.y = 'Year', all.y = T)
dt.2
dt.1 <- dt[, sum(.SD$Trade.Value.USD/10^3), by = c('Year', 'European_Union')]
colnames(dt.1)[colnames(dt.1) == 'V1'] <- 'Trade.Value.000.USD'
dt.2 <- data.table(Year = 2010:2016)
dt.2 <- merge(dt.1[European_Union == 1, c('Year', 'Trade.Value.000.USD')],
dt.2, by.x = 'Year', by.y = 'Year', all.y = T)
names(dt.2)[names(dt.2) == 'Trade.Value.000.USD'] <- 'Trade.Value.000.USD.EU'
dt.2 <- merge(dt.1[European_Union == 0, c('Year', 'Trade.Value.000.USD')],
dt.2, by.x = 'Year', by.y = 'Year', all.y = T)
dt.2
names(dt.2)[names(dt.2) == 'Trade.Value.000.USD'] <- 'Trade.Value.000.USD.others'
dt.2
dt
dt.1
dt
setwd("~/github_repos/Coursera_DDP/week_3")
